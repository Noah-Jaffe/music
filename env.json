{
  "__COMMENTS__": {
    "__COMMENTS__": "OPTIONAL. (any) Values under the '__COMMENTS__' keys are effectively a comment block to be ignored by code that is using this data, but should rather be for human comprehension.",

    "__DEBUG_MODE__": "OPTIONAL. (boolean) If true, extra logging/print statements will be used when executing the script.",

    "SONGS_FILE_PATH": "REQUIRED. (string) The file path to the song file that is to be updated.",

    "SONG_FILTERS": {
      "__COMMENTS__": "REQUIRED (array[object]) An array of dict-like objects. These should be the arguments to generate a song finding query. See 'SONG_FILTERS.ENTRY_RESERVED_KEYWORDS' for generic keywords that exist for all entries.",
      "ENTRY_RESERVED_KEYWORDS": {
        "source": "REQUIRED. (string) The source type of the SONG_FILTERS entry. <example val: 'mixcloud' -- will be caught by the updater script code for its mixcloud procedures.>",
        "__COMMENTS__": "**not a comment, but a literal 'reserved keyword'**. OPTIONAL. (any) The key name of '__comment__' is reserved for a comment about the given SONG_FILTERS entry."
      },
      "SOURCES": {
        "mixcloud": {
          "source": "REQUIRED. (string) 'mixcloud'. To enable usage of this mixcloud filter. Defaults to getting all songs for the given artist name.",
          "name": "REQUIRED. (string) The artist/dj slug name. <example val: 'therealrons' -- effectively 'mixcloud.com/therealrons/'>",
          "songNameRegex": "OPTIONAL. (string) When given, only extract songs that match the given regex (called with default python regex flags). <example val: '.*Podcast.*'>",
          "UIDNormalizationCode": "OPTIONAL. (array[any]) When given, will override the song's uid to a concatination of the given activity arrays. The activity arrays are handled by the script's 'normalizeSongUIDs' function. Read that code for more info. <example val: [[\"literal\", \"RONS/\"], [\"extractAllAlphaNumeric\",\"name\"]] -- translates for song with song['name'] == 'Podcast #699' to resulting string of 'RONS/podcast699'>",
          "slugKeys": "OPTIONAL. (array[string]) When given, will only pull out the songs for the item's artist/dj name with the given slug names. <example val: ['rons-podcast-698','rons-podcast-699'] -- effectively the songs at ['mixcloud.com/therealrons/rons-podcast-698/','mixcloud.com/therealrons/rons-podcast-699/']>"
        },
        "podomatic": {
          "source": "REQUIRED. (string) 'podomatic'. To enable usage of this podomatic filter. Defaults to getting all songs for the given artist ID.",
          "apiUserId": "REQUIRED. (number/string) The apiUserId for an artist/dj/podomatic account. <example val: 766886 -- translates to 'https://www.podomatic.com/v2/podcasts/766886/episodes?...'>",
          "name": "OPTIONAL. (string) The artist/podcast_subdomain name. <example val: 'djronslomowicz'>",
          "songNameRegex": "OPTIONAL. (string) When given, only extract songs that match the given regex (called with default python regex flags). <example val: '.*Podcast.*'>",
          "UIDNormalizationCode": "OPTIONAL. (array[any]) When given, will override the song's uid to a concatination of the given activity arrays. The activity arrays are handled by the script's 'normalizeSongUIDs' function. Read that code for more info. <example val: [[\"literal\", \"RONS/\"], [\"extractAllAlphaNumeric\",\"title\"]] -- translates for song with song['title'] == 'Podcast #699' to resulting string of 'RONS/podcast699'>"
        }
      }
    }
  },

  "__DEBUG_MODE__": true,

  "SONGS_FILE_PATH": "songs",

  "SONG_FILTERS": [
    {
      "source": "mixcloud",
      "name": "therealrons",
      "songNameRegex": ".*Podcast.*",
      "UIDNormalizationCode": [
        ["literal", "RONS/"],
        ["extractAllAlphaNumeric", "name"]
      ],
      "__COMMENTS__": "Gets all 'Podcast #' songs from rons mixcloud. To be joined/normalized with rons podomatic."
    },
    {
      "source": "podomatic",
      "name": "djronslomowicz",
      "apiUserId": 766886,
      "songNameRegex": ".*Podcast.*",
      "UIDNormalizationCode": [
        ["literal", "RONS/"],
        ["extractAllAlphaNumeric", "name"]
      ],
      "__COMMENTS__": "Gets all 'Podcast #' songs from rons podomatic. To be joined/normalized with rons mixcloud."
    },

    {
      "source": "mixcloud",
      "name": "FrankAndreasen",
      "__COMMENTS__": "Gets all mixes from FrankAndreasen aka Frankie3000 from mixcloud."
    },

    {
      "source": "mixcloud",
      "name": "Lys_",
      "__COMMENTS__": "Gets all mixes by Lys_ from mixcloud."
    },

    {
      "source": "mixcloud",
      "name": "Dj-Mighty-DnB",
      "songNameRegex": "Liquid DnB Mix - Vol 6[12469]",
      "__COMMENTS__": "Gets a select subset of DJ Mighty's mixes from mixcloud."
    },

    {
      "source": "mixcloud",
      "name": "Hudson921",
      "slugKeys": ["2000s-2010s-mix-2323"],
      "__COMMENTS__": "this is for disco type of stuff, not so sure how much i like it but ill keep for now."
    },

    {
      "source": "mixcloud",
      "name": "scotty-fox",
      "slugKeys": [
        "clarity",
        "occupational-therapy",
        "pumpkin-spice-season-2-never-too-latte",
        "songs-you-might-hear-at-a-supermarket",
        "the-rhythm-of-the-night"
      ],
      "__COMMENTS__": "this is for something new, not so sure how much i like it but ill keep for now."
    }
  ]
}
